// ENG AIR Mini Project Example
// Last Update: 13 June 2022
//
/////
#include "driver/mcpwm.h"

// Servo settings //
#define SERVO_MIN_PULSEWIDTH_US (1000) // Minimum pulse width in microsecond
#define SERVO_MAX_PULSEWIDTH_US (2000) // Maximum pulse width in microsecond
#define SERVO_MAX_DEGREE        (90)   // Maximum angle in degree upto which servo can rotate
#define SERVO_PULSE_GPIO        (32)   // GPIO connects to the PWM signal line

#define MOTOR_1_PWM_PIN 14
#define MOTOR_2_PWM_PIN 12
#define MOTOR_3_PWM_PIN 16
#define MOTOR_4_PWM_PIN 15
#define MOTOR_5_PWM_PIN 25

#define MOTOR_1_DIR_PIN 27
#define MOTOR_2_DIR_PIN 13
#define MOTOR_3_DIR_PIN 17
#define MOTOR_4_DIR_PIN 2
#define MOTOR_5_DIR_PIN 26

#define MOTOR_RELAY_PIN 33

#define MOTOR_CW 0
#define MOTOR_CCW 1

#define MOTOR_MAX_VEL 512

unsigned long odom_led_update_timestamp = millis();

int current_vel_x = 0;
int current_vel_y = 0;
int current_vel_w = 0;
int target_vel_x = 0;
int target_vel_y = 0;
int target_vel_w = 0;
int target_vel_z = 0;
int vel_step = 1;
int vel_update_period = 3;//

String Command;
int openGrip = 60;
int closeGrip = 20;

void setup() {
  Serial.begin(115200);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }
  
  espnode_init();
  epsnode_oled_set_standard_info(0, 0);
  espnode_oled_set_message_text(0, "Mini Proj");
  
  motor_init();

  //create a task that will be executed in the Task1code() function, with priority 1 and executed on core 1
  xTaskCreatePinnedToCore(
                    loop2,   /* Task function. */
                    "Loop2",     /* name of task. */
                    10000,       /* Stack size of task */
                    NULL,        /* parameter of the task */
                    1,           /* priority of the task */
                    NULL,      /* Task handle to keep track of created task */
                    1);          /* pin task to core 1 */    
  

  Serial.println("Ready.");
}

void loop() {
  espnode_button_state_update();


  

  if(espnode_get_button_1_state())
  {
    espnode_buzzer_multiple_beeps(1000, 100, 100, 1);

    // task1
    
     forward(3200);   
     stay(5000);

   
    // check vision from jetson nano via serial
    while (Serial.available()==0){}
    
    Command = Serial.readStringUntil('\r');
    
    if (Command == "l"){
        // task 2 Blue
        
         moveLeft(1800);
         stay(5000);

        //task 3

         turnRight(660);         
         forward(3000);
         stay(5000);
    
        //task 4
        
        turnLeft(600);
        forward(200);
        stay(100);
        servo_set_angle(closeGrip);
        gripperUp(200);
        forward(200);
        stay(100);
        gripperDown(200);
        servo_set_angle(openGrip);  
     }
    if (Command == "r"){
        // task 2 Red
        
         moveRight(1800);
         stay(5000);

        //task 3

         turnLeft(660);
         forward(3000);
         stay(5000);
     
        //task 4
        
        turnRight(600);
        forward(200);
        stay(100);
        servo_set_angle(closeGrip);
        gripperUp(200);
        forward(200);
        stay(100);
        gripperDown(200);
        servo_set_angle(openGrip);  
     }    
}
  else if(espnode_get_button_2_state()){
    espnode_buzzer_multiple_beeps(1000, 100, 100, 2);

    // task 2 Red
     delay(1000);
     moveRight(1800);
     stay(5000);
  
    //task 3

     turnLeft(660);
     forward(3000);
     stay(5000);

    //task 4
    
    turnRight(600);
    forward(200);
    stay(100);
    servo_set_angle(closeGrip);
    gripperUp(200);
    forward(200);
    stay(100);
    gripperDown(200);
    servo_set_angle(openGrip);  
  }
  else if(espnode_get_button_3_state()){
    espnode_buzzer_multiple_beeps(1000, 100, 100, 3);
    // task 2 Blue
     delay(1000);
     moveLeft(1800);
     stay(5000);

    //task 3

     turnRight(400);
     forward(3000);
     stay(5000);

    //task 4
    
    turnLeft(600);
    forward(200);
    stay(100);
    servo_set_angle(closeGrip);
    gripperUp(200);
    forward(200);
    stay(100);
    gripperDown(200);
    servo_set_angle(openGrip);
   }
   
  else if(espnode_get_button_4_state()){
    //task 4
    
    forward(400);
    stay(100);
    servo_set_angle(closeGrip);
    gripperUp(200);
    forward(400);
    stay(100);
    gripperDown(200);
    servo_set_angle(openGrip); 
  }
  else{
    target_vel_x = 0;
    target_vel_y = 0;
    target_vel_w = 0;
  }

//  if (Serial.available() > 0) { //debug
//    int vel = Serial.parseInt();
//
//    if (vel != 0){
//      target_vel_y = vel;
//      Serial.print("Update: ");
//      Serial.println(vel);
//    }
//  }

  delay(10);

}

void loop2( void * pvParameters ){
  while(true) {

    // 0 to 512
    if(current_vel_x < target_vel_x) current_vel_x += vel_step;
    else if(current_vel_x > target_vel_x) current_vel_x -= vel_step;

    if(current_vel_y < target_vel_y) current_vel_y += vel_step;
    else if(current_vel_y > target_vel_y) current_vel_y -= vel_step;

    if(current_vel_w < target_vel_w) current_vel_w += vel_step;
    else if(current_vel_w > target_vel_w) current_vel_w -= vel_step;

    if( current_vel_x > MOTOR_MAX_VEL) current_vel_x = MOTOR_MAX_VEL;
    else if( current_vel_x < -MOTOR_MAX_VEL) current_vel_x = -MOTOR_MAX_VEL;

    if( current_vel_y > MOTOR_MAX_VEL) current_vel_y = MOTOR_MAX_VEL;
    else if( current_vel_y < -MOTOR_MAX_VEL) current_vel_y = -MOTOR_MAX_VEL;

    if( current_vel_w > MOTOR_MAX_VEL) current_vel_w = MOTOR_MAX_VEL;
    else if( current_vel_w < -MOTOR_MAX_VEL) current_vel_w = -MOTOR_MAX_VEL;
    
    robot_set_velocity(current_vel_x, current_vel_y, current_vel_w);
    //slider_set_velocity(target_vel_z);

    delay(vel_update_period);

  }
}

void motor_init(){
  pinMode(MOTOR_1_DIR_PIN, OUTPUT);
  pinMode(MOTOR_2_DIR_PIN, OUTPUT);
  pinMode(MOTOR_3_DIR_PIN, OUTPUT);
  pinMode(MOTOR_4_DIR_PIN, OUTPUT);
  pinMode(MOTOR_5_DIR_PIN, OUTPUT);

  pinMode(MOTOR_1_PWM_PIN, OUTPUT);
  pinMode(MOTOR_2_PWM_PIN, OUTPUT);
  pinMode(MOTOR_3_PWM_PIN, OUTPUT);
  pinMode(MOTOR_4_PWM_PIN, OUTPUT);
  pinMode(MOTOR_5_PWM_PIN, OUTPUT);
 
  ledcSetup(1, 10000, 10); //10k Hz, 10 bits resolution
  ledcSetup(2, 10000, 10);
  ledcSetup(3, 10000, 10);
  ledcSetup(4, 10000, 10);
  ledcSetup(5, 10000, 10);
  
  ledcAttachPin(MOTOR_1_PWM_PIN, 1);
  ledcAttachPin(MOTOR_2_PWM_PIN, 2);
  ledcAttachPin(MOTOR_3_PWM_PIN, 3);
  ledcAttachPin(MOTOR_4_PWM_PIN, 4);
  ledcAttachPin(MOTOR_5_PWM_PIN, 5);

  ledcWrite(1, 0);
  ledcWrite(2, 0);
  ledcWrite(3, 0);
  ledcWrite(4, 0);
  ledcWrite(5, 0);

  digitalWrite(MOTOR_1_DIR_PIN, 0);
  digitalWrite(MOTOR_2_DIR_PIN, 0);
  digitalWrite(MOTOR_3_DIR_PIN, 0);
  digitalWrite(MOTOR_4_DIR_PIN, 0);
  digitalWrite(MOTOR_5_DIR_PIN, 0);

  pinMode(MOTOR_RELAY_PIN, OUTPUT);
  digitalWrite(MOTOR_RELAY_PIN, 1);
  
}

void motor_set_pwm(int ch, int duty_cycle){ //0-1023
  ledcWrite(ch, duty_cycle);
}

void motor_set_direction(int ch, int dir){
  if(ch==1) digitalWrite(MOTOR_1_DIR_PIN, dir);
  else if(ch==2) digitalWrite(MOTOR_2_DIR_PIN, dir);
  else if(ch==3) digitalWrite(MOTOR_3_DIR_PIN, dir);
  else if(ch==4) digitalWrite(MOTOR_4_DIR_PIN, dir);
  else if(ch==5) digitalWrite(MOTOR_5_DIR_PIN, dir);
}

void robot_set_velocity(int vx, int vy, int vw){
//////////////////
//  //  front
//  //V3 --- V4
//  //    X
//  //V1 --- V2
//  //   rear
///////////////////
  
  int pwm_1 = vy - vx - vw;
  int pwm_2 = vy + vx + vw;
  int pwm_3 = vy + vx - vw;
  int pwm_4 = vy - vx + vw;

  if (pwm_1 > 0) digitalWrite(MOTOR_1_DIR_PIN, MOTOR_CCW);
  else digitalWrite(MOTOR_1_DIR_PIN, MOTOR_CW);

  if (pwm_2 > 0) digitalWrite(MOTOR_2_DIR_PIN, MOTOR_CW);
  else digitalWrite(MOTOR_2_DIR_PIN, MOTOR_CCW);

  if (pwm_3 > 0) digitalWrite(MOTOR_3_DIR_PIN, MOTOR_CCW);
  else digitalWrite(MOTOR_3_DIR_PIN, MOTOR_CW);

  if (pwm_4 > 0) digitalWrite(MOTOR_4_DIR_PIN, MOTOR_CW);
  else digitalWrite(MOTOR_4_DIR_PIN, MOTOR_CCW);
  
  int abs_pwm_1 = abs(pwm_1);
  int abs_pwm_2 = abs(pwm_2);
  int abs_pwm_3 = abs(pwm_3);
  int abs_pwm_4 = abs(pwm_4);

  if (abs_pwm_1 > 512) abs_pwm_1 = 1024;
  else if (abs_pwm_1 <= 0) abs_pwm_1 = 0;
  else abs_pwm_1 += 512;
  
  if (abs_pwm_2 > 512) abs_pwm_2 = 1024;
  else if (abs_pwm_2 <= 0) abs_pwm_2 = 0;
  else abs_pwm_2 += 512;
  
  if (abs_pwm_3 > 512) abs_pwm_3 = 1024;
  else if (abs_pwm_3 <= 0) abs_pwm_3 = 0;
  else abs_pwm_3 += 512;
  
  if (abs_pwm_4 > 512) abs_pwm_4 = 1024;
  else if (abs_pwm_4 <= 0) abs_pwm_4 = 0;
  else abs_pwm_4 += 512;

  motor_set_pwm(1, abs_pwm_1);
  motor_set_pwm(2, abs_pwm_2);
  motor_set_pwm(3, abs_pwm_3);
  motor_set_pwm(4, abs_pwm_4);
}

void slider_set_velocity(int v){

  int pwm_5 = v;
 
  if (pwm_5 > 0) digitalWrite(MOTOR_5_DIR_PIN, MOTOR_CCW);
  else digitalWrite(MOTOR_5_DIR_PIN, MOTOR_CW);
 
  int abs_pwm_5 = abs(pwm_5);
 
  if (abs_pwm_5 > 512) abs_pwm_5 = 1024;
  else if (abs_pwm_5 <= 0) abs_pwm_5 = 0;
  else abs_pwm_5 += 512;
 
  motor_set_pwm(5, abs_pwm_5);

  }
static inline uint32_t convert_servo_angle_to_duty_us(int angle) {
    return (angle + SERVO_MAX_DEGREE) * (SERVO_MAX_PULSEWIDTH_US - SERVO_MIN_PULSEWIDTH_US) / (2 * SERVO_MAX_DEGREE) + SERVO_MIN_PULSEWIDTH_US;
}

// initialize servo pwm
void servo_init(){
  mcpwm_gpio_init(MCPWM_UNIT_0, MCPWM0A, SERVO_PULSE_GPIO); // To drive a RC servo, one MCPWM generator is enough
  mcpwm_config_t pwm_config;
  pwm_config.frequency = 50; // frequency = 50Hz, i.e. for every servo motor time period should be 20ms
  pwm_config.cmpr_a = 0;     // duty cycle of PWMxA = 0
  pwm_config.counter_mode = MCPWM_UP_COUNTER;
  pwm_config.duty_mode = MCPWM_DUTY_MODE_0;
  
  mcpwm_init(MCPWM_UNIT_0, MCPWM_TIMER_0, &pwm_config);
}

// assign pwm value to the pin for angle control
void servo_set_angle(int angle){
  if(angle > 90) angle = 90;
  else if(angle < -90) angle = -90;
  mcpwm_set_duty_in_us(MCPWM_UNIT_0, MCPWM_TIMER_0, MCPWM_OPR_A, convert_servo_angle_to_duty_us(angle));
}

// define function to move forward for t second
void forward(int t){
    target_vel_x = 0;
    target_vel_y = 512;
    target_vel_w = 0;
    delay(t);
  }

// define function to stay for t second
void stay(int t){
    target_vel_x = 0;
    target_vel_y = 0;
    target_vel_w = 0;
    delay(t);
  }

// define function to move left for t second
void moveLeft(int t){
    target_vel_x = 512;
    target_vel_y = 0;
    target_vel_w = 0;
    delay(t);
  }
  
// define function to move right for t second
void moveRight(int t){
    target_vel_x = -512;
    target_vel_y = 0;
    target_vel_w = 0;
    delay(t);
  }
  
// define function to turn left for t second
void turnLeft(int t){
     target_vel_x = 0;
    target_vel_y = 0;
    target_vel_w = -512;
    delay(t);
  }

// define function to turn right for t second
void turnRight(int t){
     target_vel_x = 0;
    target_vel_y = 0;
    target_vel_w = 512;
    delay(t);
  }

// define function to move gripper upwards for t second
void gripperUp(int t){
     target_vel_z = 5;
     delay(t);
  }

// define function to move gripper downwards for t second
void gripperDown(int t){
     target_vel_z = -5;
     delay(t);
  }
